Importing other code by retrieving them from whatever scope they're in. For example, rng = .../Random.new, Local_Math = .../Math, etc. Or from a file with Local_Math = ~/math.e

Scope could extend Hash instead of having a @hash attribute, that would be less work for me, I think.
7/10/25, I tried this and it didn't go smoothly. I'll save this idea for another day!

Shorthand literals, but maybe they should be two-letter shorthands like in Ruby.
^(1, 2, 3) could create Vector literals, and infer dimension based on number of expressions.
#(abc 123) -> Hash {abc: nil, 123: nil} and if abc is defined locally, it should take its value too.
%(this is a set)
?(abc def) returns true if all truthy
$(one two) strings like %w() in Ruby
:(one two) symbols like %i() in Ruby

Some way to keep track of instance IDs as an integer. These would be strictly for constructs(.rb), not expressions(.rb).
@instance_count_by_class = {
	 Nil:                  0,
	 Instance:             0,
	 Type:                 0,
	 Func:                 0,
	 Scope:                0,
	 Tuple:                0,
	 Left_Exclusing_Range: 0,
	 # The rest can be added at runtime
}

Take inspiration from Ruby unary operators for prefixes. `def -@`

Maybe bring back = as a declaration operator. I don't want to be forced to use it, but maybe it can be repurposed.

Closures. There's one skipped test in interpreter_test.rb until closures are implemented.
